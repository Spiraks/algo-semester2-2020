/****************************************************************************
Секретные материалы

Джон Макклейн сообщает по рации новую информацию о террористах в отдел с n полицейскими. Он звонит нескольким сотрудникам и просит распространить информацию по отделу, зная, что у каждого полицейского есть связь с определёнными коллегами. Джон Макклейн хочет, чтобы операция прошла успешно. Но если полицейский позвонит коллеге, от которого(возможно, не напрямую) сам получил информацию, террористы смогут отследить этот звонок и помешать операции. Если же двое сотрудников оповестят одного, ничего плохого не произойдёт. Помогите Джону Макклейну. Выведите NO, если кто-то из полицейских ошибётся, делая звонок. Если всё пройдёт хорошо, выведите YES и порядок, в котором полицейские получат информацию, считая, что полицейские оповещают коллег по возрастанию их номеров, а в начале Джон даёт информацию тем, кому не может позвонить никто из коллег.

Нумерация ведётся с 0. Петли допустимы.

Ввод:
Первая строка содержит пару целых чисел n и m (1 ≤ n, m ≤ 10^5) — количество вершин и рёбер заданного ориентированного графа.
Следующие m строк содержат описания рёбер, по одному в строке. Каждая из строк содержит по два целых числа a и b (0 ≤ a, b < n) — начало и конец ребра.

Вывод:
Если такого порядка не существует, то выведите «NO» (без кавычек).
В противном случае, выведите «YES» в первую из строк. Во вторую строку выведите перестановку индексов вершин (целые числа от 0 до n - 1), такую, что для каждого ребра его стартовая вершина находится строго левее его конечной вершины.


  in  | out
 -----|-----
  4 5 | YES
  0 2 | 0 2 1 3
  2 1 |
  1 3 |
  2 3 |
  0 3 |

  in  | out
 -----|-----
  3 3 | NO
  0 1 |
  1 2 |
  2 0 |


  in  | out
 -----|-----
  2 2 | NO
  0 1 |
  1 1 |


****************************************************************************/
#include <iostream>
#include <vector>
#include <queue>

class Graph
{
public:
    Graph(int n) : adjacencyList(n), indegree(n)
    {
    }

    void AddEdge(int from, int to)
    {
        adjacencyList[from].push_back(to);
        indegree[to]++;
    }
    
    std::vector<int> TopologicalSort(int n)
    {
        std::vector<int> result;
        std::queue<int> q;

        for (int i = 0; i < n; i++)
        {
            if (indegree[i] == 0)
            {
                q.push(i);
            }
        }

        while (!q.empty())
        {
            int node = q.front();
            q.pop();
            result.push_back(node);

            for (int neighbor : adjacencyList[node])
            {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0)
                {
                    q.push(neighbor);
                }
            }
        }

        return result;
    }

private:
    int V; // Количество вершин
    std::vector<std::vector<int>> adjacencyList;
    std::vector<int> indegree;
};

int main()
{
    int n, m;
    std::cin >> n >> m;
    Graph g(n);

    for (int i = 0; i < m; i++)
    {
        int a, b;
        std::cin >> a >> b;
        g.AddEdge(a, b);
    }

    std::vector<int> order = g.TopologicalSort(n);

    if (order.size() == n)
    {
        std::cout << "YES" << std::endl;
        for (int node : order)
        {
            std::cout << node << " ";
        }
        std::cout << std::endl;
    }
    else
    {
        std::cout << "NO" << std::endl;
    }

    return 0;
}
